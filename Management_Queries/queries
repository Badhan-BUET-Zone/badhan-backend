Report: No donation with inconsistent donorId exists in the donations table.



// db.donations.count()


// db.donors.aggregate([
//     {
//         $addFields: {
//             donorObjectId: { $toObjectId: "$_id" }
//         }
//     },
//     {$out:'modifiedDonors'}
// ])

// db.donors.aggregate([
//     {
//         "$addFields": {
//             "donorId": {
//                 "$toString": "$_id"
//             }
//         }
//     },
//     {$out:'modifiedDonors'}
// ])


// db.donations.aggregate([
//     { $lookup:
//             {
//                 from: "modifiedDonors",
//                 localField: "donorId",
//                 foreignField: "donorId",
//                 as: "donorInfo"
//             }
//     },
//     {$out:'modifiedTable'}
// ]);



// db.modifiedTable.count()
//2597

//
// db.modifiedTable.find({ donorInfo:{$exists:true} })

// db.modifiedTable.find( { $where: "this.donorInfo.length > 0" } );
// db.collection.find( { donorInfo: { $size: 1 } } )

// db.collection.find( {$nor: [
//         {donorInfo: {$size: 0}}
//     ]} )

//db.modifiedTable.find({ donorInfo: { $exists: true, $ne: [] } })

// db.modifiedTable.find({ donorInfo: { $size: 0} }).count()



// db.modifiedTable.findOne({ donorInfo: { $size: 0} })
//donorId :
// _id: 6071b057e80b9d0017aefe17


// db.donations.deleteMany({donorId: {$exists: false}})


////////////////////////GET THE LIST OF DUPLICATE DONORS THAT DON'T MATCH ONLY BY ID
db.donors.aggregate({
    $project: {
        "_id": 1, // keep the _id field where it is anyway
        "doc": "$$ROOT" // store the entire document in the "doc" field
    }
}, {
    $project: {
        "doc._id": 0 // remove the _id from the stored document because we do not want to compare it
    }
}, {
    $group: {
        "_id": "$doc", // group by the entire document's contents as in "compare the whole document"
        "ids": { $push: "$_id" }, // create an array of all IDs that form this group
        "count": { $sum: 1 } // count the number of documents in this group
    }
}, {
    $match: {
        "count": { $gt: 1 } // only show what's duplicated
    }
})

////////////GET LIST OF DONORS AND COUNT WITH DUPLICATE PHONE
db.donors.aggregate([
    {$group: {
            _id: {name: "$phone"},
            uniqueIds: {$addToSet: "$_id"},
            count: {$sum: 1}
        }
    },
    {$match: {
            count: {"$gt": 1}
        }
    },
    {$sort: {
            count: -1
        }
    }
]);

// GET student IDs having integer values
db.donors.find({studentId:{$type:18}}).count()
db.donors.find({studentId:{$type:16}}).count()

// query for the new GET /activeDonors route
db.activedonors.aggregate([{
    $lookup: {
        from: 'donors',
        localField: 'donorId',
        foreignField: '_id',
        as: 'donorDetails'
    },
},
    {
        $addFields: {
            donorDetails: {$first: "$donorDetails"},
        }
    },
    {
        $project: {
            markerId: 1,
            _id: "$donorDetails._id",
            hall: "$donorDetails.hall",
            name: "$donorDetails.name",
            address: "$donorDetails.address",
            comment: "$donorDetails.comment",
            lastDonation: "$donorDetails.lastDonation",
            availableToAll: "$donorDetails.availableToAll",
            bloodGroup: "$donorDetails.bloodGroup",
            studentId: "$donorDetails.studentId",
            phone: "$donorDetails.phone",
            markedTime: "$time",
        }
    },
    {
        $match: {
            studentId: "1910128"
        }
    },
    {
        $lookup: {
            from: 'donors',
            localField: 'markerId',
            foreignField: '_id',
            as: 'markerDetails'
        }
    },
    {
        $addFields: {
            "markerName": {$first: "$markerDetails.name"},
        }
    },
    {
        $lookup: {
            from: 'donations',
            localField: '_id',
            foreignField: 'donorId',
            as: 'donations'
        },
    },
    {
        $lookup: {
            from: 'callrecords',
            localField: '_id',
            foreignField: 'calleeId',
            as: 'callRecords'
        }
    },
    {
        $addFields: {
            donationCount: {$size: "$donations"},
        }
    },
    {
        $addFields:{
            callRecordCount: {$size: "$callRecords"}
        }
    },
    {
        $project:{
            markerDetails: 0,
            markerId:0,
            donations: 0,
            callRecords: 0,
        }
    }
])